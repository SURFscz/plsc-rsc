#!/usr/bin/env python

import sys
import yaml, re
import ldap

import util
from connection import Connection


def get_collobrations_for_service(connection, service):
    """ Given a service determine all COs that are part of it
    and return the found COs.

    Arguments:
        connection - An LDAP connection.
        service    - Service to find COs for

    Return:
        Dict of COs and their displayName.
    """

    r = connection.find(None,
                        "(&(ObjectClass=organization)(o=*))",
                        ['o', 'description'],
                        ldap.SCOPE_ONELEVEL
                       )
    cos = {}

    for dn, attrinutes in r.items():
        rdns = util.dn2rdns(dn)
        co_id = dn

        l = {}
        for name, value in attrinutes.items():
            if 'description' in name:
                l[name] = value[0]

        cos["{}".format(co_id)] = l

    return cos

if len(sys.argv) < 2:
    sys.exit(sys.argv[0] + "  <conf.yml>")
    exit()

with open(sys.argv[1]) as f:
  config = yaml.safe_load(f)

service = (util.dn2rdns(config['ldap']['src']['basedn'])['dc'])[0]

src = Connection(config['ldap']['src'])
dst = Connection(config['ldap']['dst'])

collaborations = get_collobrations_for_service(src, service)

# Create phase
print("--- Create ---")
for service, cos in collaborations.items():
    # print("s: {:.20}".format(service))
    # print("c: {}".format(cos))

    co_id = util.dn2rdns(service)['o'][0]
    # print("co_id: {}".format(co_id))

    dst_entry = {}
    dst_entry['displayName'] = cos['description']

    basedn = "ou=People,o={}".format(co_id)
    src_dns = src.rfind(basedn, "(ObjectClass=person)")
    src_attr_values = src_dns.values()

    dst_entry['objectClass'] = ['inetOrgPerson', 'person', 'posixAccount']
    dst_entry['uid'] = list(src_attr_values)[0]
    for v in src_attr_values:
        if 'mail' in v:
            dst_entry['mail'] = v['mail']

        if 'sshPublicKey' in v:
            dst_entry['objectClass'].append('ldapPublicKey')
            dst_entry['sshPublicKey'] = v['sshPublicKey']

        if 'eduPersonPrincipalName' in v:
            dst_entry['objectClass'].append('eduPerson')
            dst_entry['eduPersonPrincipalName'] = v['eduPersonPrincipalName']

    print(dst_entry)
    continue
    if True:
        co_name = co_name[0]

        co_id = {}
        print("- co: {}/{}".format(co_name, co_id))
        print("  People")

        basedn = "ou=People,o={},dc={}".format(co_id, service)
        src_dns = src.rfind(basedn, '(ObjectClass=person)')

        for src_dn, src_entry in src_dns.items():
            print("  - srcdn: {}".format(src_dn))
            src_uid = src_entry['uid'][0]

            # Here's the magic: Build the new person entry
            dst_entry = {}
            dst_entry['objectClass'] = ['inetOrgPerson', 'person', 'posixAccount']
            dst_entry['uid'] = [src_uid]
            dst_entry['cn'] = src_entry['cn']
            dst_entry['sn'] = src_entry['sn']
            dst_entry['homeDirectory'] = ['/home/{}'.format(src_uid)]

            if 'sshPublicKey' in src_entry:
               dst_entry['objectClass'].append('ldapPublicKey')
               dst_entry['sshPublicKey'] = src_entry['sshPublicKey']

            if 'eduPersonPrincipalName' in src_entry:
                dst_entry['objectClass'].append('eduPerson')
                dst_entry['eduPersonPrincipalName'] = src_entry['eduPersonPrincipalName']

            if 'mail' in src_entry:
                dst_entry['mail'] = src_entry['mail']

            basedn = "ou=People,o={},ou=COs".format(co_id)
            dst_dns = dst.rfind(basedn, "(&(ObjectClass=person)(uid={}))".format(src_uid))

            if len(dst_dns) == 1:
                dst_dn, old_entry = list(dst_dns.items())[0]
                new_entry = old_entry.copy()
                for attr, values in dst_entry.items():
                    new_entry[attr] = values
                ldif = dst.modify(dst_dn, old_entry, new_entry)
                print("    - mod: {}".format(ldif))

            elif len(dst_dns) == 0:
                uid = dst.get_sequence("cn=uidNumberSequence,ou=Sequence,o={},ou=COs,{}".format(co_id, dst.basedn))
                dst_entry['uidNumber'] = [str(uid)]
                gid = dst.get_sequence("cn=gidNumberSequence,ou=Sequence,o={},ou=COs,{}".format(co_id, dst.basedn))
                dst_entry['gidNumber'] = [str(gid)]
                dst_dn = "uid={},ou=People,o={},ou={},{}".format(src_uid, co_id, service, dst.basedn)
                ldif = dst.add(dst_dn, dst_entry)
                print("    - add: {}".format(ldif))

            else:
                print("    - Too many dstdn's")

        print("\n  Groups")
        src_dns = src.rfind('ou=Groups,o={},dc={}'.format(co_id, service), '(&(objectClass=groupOfNames)(!(objectClass=labeledURIObject))(!(cn=GRP:CO:*)))')
        for src_dn, src_entry in src_dns.items():
            print("  - srcdn: {}".format(src_dn))
            src_rdns = util.dn2rdns(src_dn)
            src_cn = src_rdns['cn'][0]
            src_type = src_entry['ou'][0]

            # Here's the magic: Build the new group entry
            m = re.search('^(?:GRP)?(?:CO)?(?:COU)?:(.*?)$', src_cn)
            dst_cn = src_type + "_" + m.group(1) if m.group(1) else ""

            dst_entry = {}
            dst_entry['objectClass'] = ['extensibleObject', 'posixGroup', 'sczGroup']
            dst_entry['cn'] = [dst_cn]
            dst_entry['displayName'] = [src_cn]

            members = []

            # Build members
            for member in src_entry['member']:
                member_rdns = util.dn2rdns(member)
                # Is member user?
                if member_rdns.get('uid', None):
                    dns = dst.rfind("ou=People,o={},ou=COs".format(co_id), "(uid={})".format(member_rdns['uid'][0]))
                # member is group?
                elif member_rdns.get('cn', None):
                    dns = dst.rfind("ou=Groups,o={},ou=COs".format(co_id), "(description={})".format(member_rdns['cn'][0]))

                if len(dns) == 1:
                    member_dst_dn, member_dst_entry = list(dns.items())[0]
                    members.append(member_dst_dn)

            dst_entry['sczMember'] = members

            dst_dns = dst.rfind("ou=Groups,o={},ou=COs".format(co_id), "(&(ObjectClass=posixGroup)(description={}))".format(src_cn))

            if len(dst_dns) == 1:
                dst_dn, old_entry = list(dst_dns.items())[0]
                new_entry = old_entry.copy()
                for attr, values in dst_entry.items():
                    new_entry[attr] = values
                    ldif = dst.modify(dst_dn, old_entry, new_entry)
                print("    - mod: {}".format(ldif))

            elif len(dst_dns) == 0:
                gid = dst.get_sequence("cn=gidNumberSequence,ou=Sequence,o={},ou=COs,{}".format(co_id, dst.basedn))
                dst_entry['gidNumber'] = [str(gid)]
                dst_dn = "cn={},ou=Groups,o={},ou=COs,{}".format(dst_cn, co_id, dst.basedn)

                print()
                print("dst_dn: {}".format(dst_dn))
                print("dst_entry: {}".format(dst_entry))
                print()

                ldif = dst.add(dst_dn, dst_entry)
                print("    - add: {}".format(ldif))

            else:
                print("    - Too many dstdn's")

        print()

sys.exit()
# Cleanup phase
print("--- Cleanup ---")
for service, cos in rsc_sp.items():
    print("service: {}".format(service))

    organizations = dst.rfind("ou={}".format(service), '(&(objectClass=organization)(objectClass=extensibleObject))')
    for o_dn, o_entry in organizations.items():
        #print("o: {}".format(o_dn))
        #print("entry: {}".format(o_entry))

        if o_entry.get('description', None):
            co_name = o_entry['description'][0]

            o_rdns = util.dn2rdns(o_dn)
            print("- o: {}".format(o_rdns['o'][0]))

            print("  - People")
            dst_dns = dst.rfind("ou=People,o={},ou={}".format(o_rdns['o'][0], service), '(objectClass=person)')
            for dst_dn, dst_entry in dst_dns.items():
                #print("  - dstdn: {}".format(dst_dn))
                #print("    entry: {}".format(dst_entry))

                if dst_entry.get('uid', None):
                    src_uid = dst_entry['uid'][0]
                    src_dns = src.rfind("ou=People,o={}".format(co_name), '(uid={})'.format(src_uid))
                    if len(src_dns):
                        for src_dn, src_entry in src_dns.items():
                            pass
                            #print("   - srcdn: {}".format(src_dn))
                    else:
                        print("    - dstdn: {}".format(dst_dn))
                        print("      srcdn not found, deleting {}".format(dst_dn))
                        dst.delete(dst_dn)

            print("\n  - Groups")
            dst_dns = dst.rfind("ou=Groups,o={},ou={}".format(o_rdns['o'][0], service), '(objectClass=sczGroup)')
            for dst_dn, dst_entry in dst_dns.items():
                #print("  - dstdn: {}".format(dst_dn))
                #print("    entry: {}".format(dst_entry))

                if dst_entry.get('description', None):
                    src_cn = dst_entry['description'][0]
                    src_dns = src.rfind("ou=Groups,o={}".format(co_name), '(cn={})'.format(src_cn))
                    if len(src_dns):
                        for src_dn, src_entry in src_dns.items():
                            pass
                            #print("   - srcdn: {}".format(src_dn))
                    else:
                        print("    - dstdn: {}".format(dst_dn))
                        print("      srcdn not found, deleting {}".format(dst_dn))
                        dst.delete(dst_dn)


            print()
